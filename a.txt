
<div class="container">

  <!-- <form nz-form [formGroup]="form" (ngSubmit)="submit()" role="form">
    <h3>{{ 'app.register.register' | translate }}</h3>
    <nz-alert *ngIf="error" [nzType]="'error'" [nzMessage]="error" [nzShowIcon]="true" class="mb-lg"></nz-alert>
    <nz-form-item [class.ant-input-group-rtl]="false">
      <nz-form-control [nzErrorTip]="mailErrorTip">
        <nz-form-label [nzSpan]="6" nzFor="email">E-mail</nz-form-label>
        <nz-input-group nzSize="large" nzAddonBeforeIcon="user">
          <input nz-input formControlName="mail" placeholder="Email" />
        </nz-input-group>
        <ng-template #mailErrorTip let-i>
          <ng-container *ngIf="i.errors?.required">{{ 'validation.email.required' | translate }}</ng-container>
          <ng-container *ngIf="i.errors?.email">{{ 'validation.email.wrong-format' | translate }}</ng-container>
        </ng-template>
      </nz-form-control>
    </nz-form-item>
    <nz-form-item>
      <nz-form-control [nzErrorTip]="'validation.password.required' | translate">
        <nz-form-label [nzSpan]="6" nzFor="email">password</nz-form-label>
        <nz-input-group
          nzSize="large"
          nzAddonBeforeIcon="lock"
          nz-popover
          nzPopoverPlacement="right"
          nzPopoverTrigger="focus"
          [(nzPopoverVisible)]="visible"
          nzPopoverOverlayClassName="register-password-cdk"
          [nzPopoverOverlayStyle]="{ 'width.px': 240 }"
          [nzPopoverContent]="pwdCdkTpl"
        >
          <input nz-input type="password" formControlName="password" placeholder="Password" />
        </nz-input-group>
        <ng-template #pwdCdkTpl>
          <div style="padding: 4px 0;">
            <ng-container [ngSwitch]="status">
              <div *ngSwitchCase="'ok'" class="success">{{ 'validation.password.strength.strong' | translate }}</div>
              <div *ngSwitchCase="'pass'" class="warning">{{ 'validation.password.strength.medium' | translate }}</div>
              <div *ngSwitchDefault class="error">{{ 'validation.password.strength.short' | translate }}</div>
            </ng-container>
            <div class="progress-{{ status }}">
              <nz-progress
                [nzPercent]="progress"
                [nzStatus]="passwordProgressMap[status]"
                [nzStrokeWidth]="6"
                [nzShowInfo]="false"
              ></nz-progress>
            </div>
            <p class="mt-sm">{{ 'validation.password.strength.msg' | translate }}</p>
          </div>
        </ng-template>
      </nz-form-control>
    </nz-form-item>
    <nz-form-item>
      <nz-form-control [nzErrorTip]="confirmErrorTip">
        <nz-input-group nzSize="large" nzAddonBeforeIcon="lock">
          <input nz-input type="password" formControlName="confirm" placeholder="Confirm Password" />
        </nz-input-group>
        <ng-template #confirmErrorTip let-i>
          <ng-container *ngIf="i.errors?.required">{{ 'validation.confirm-password.required' | translate }}</ng-container>
          <ng-container *ngIf="i.errors?.equar">{{ 'validation.password.twice' | translate }}</ng-container>
        </ng-template>
      </nz-form-control>
    </nz-form-item>
    <nz-form-item>
      <nz-form-control [nzErrorTip]="mobileErrorTip">
        <nz-input-group nzSize="large" [nzAddOnBefore]="addOnBeforeTemplate">
          <ng-template #addOnBeforeTemplate>
            <nz-select formControlName="mobilePrefix" style="width: 100px;">
              <nz-option [nzLabel]="'+86'" [nzValue]="'+86'"></nz-option>
              <nz-option [nzLabel]="'+87'" [nzValue]="'+87'"></nz-option>
            </nz-select>
          </ng-template>
          <input formControlName="mobile" nz-input placeholder="Phone number" />
        </nz-input-group>
        <ng-template #mobileErrorTip let-i>
          <ng-container *ngIf="i.errors?.required">{{ 'validation.phone-number.required' | translate }}</ng-container>
          <ng-container *ngIf="i.errors?.pattern">{{ 'validation.phone-number.wrong-format' | translate }}</ng-container>
        </ng-template>
      </nz-form-control>
    </nz-form-item>
    <nz-form-item>
      <nz-form-control [nzErrorTip]="'validation.verification-code.required' | translate">
        <nz-row [nzGutter]="8">
          <nz-col [nzSpan]="16">
            <nz-input-group nzSize="large" nzAddonBeforeIcon="mail">
              <input nz-input formControlName="captcha" placeholder="Captcha" />
            </nz-input-group>
          </nz-col>
          <nz-col [nzSpan]="8">
            <button type="button" nz-button nzSize="large" (click)="getCaptcha()" [disabled]="count > 0" nzBlock [nzLoading]="false">
              {{ count ? count + 's' : ('app.register.get-verification-code' | translate) }}
            </button>
          </nz-col>
        </nz-row>
      </nz-form-control>
    </nz-form-item>
    <nz-form-item>
      <button nz-button nzType="primary" nzSize="large" type="submit" [nzLoading]="false" class="submit">
        {{ 'app.register.register' | translate }}
      </button>
      <a class="login" routerLink="/passport/login">{{ 'app.register.sign-in' | translate }}</a>
    </nz-form-item>
  </form> -->


<nz-tabset
   [nzAnimated]="false"
   class="tabs"
   [class.ant-tabs-rtl]="true"
   (nzSelectChange)="switch($event)">
  <nz-tab [nzTitle]="'app.login.tab-login-credentials' | translate">
    hi
  </nz-tab>
  <nz-tab [nzTitle]="'app.login.tab-login-mobile' | translate">
    yo
  </nz-tab>
</nz-tabset>
</div>






.container {
  height: 100vh;

  background-color: rgba(#A2B5C3, 0.1);
  background-repeat:no-repeat;
  -webkit-background-size:cover;
  -moz-background-size:cover;
  -o-background-size:cover;
  background-size:cover;
  background-position:center;

  display: flex;
  align-items: center;
  justify-content: center;
  form {
    max-width: 600px;
  }
}

.container::after {
  content: "";
  background-image: url("../assets/logistic-symbles.svg");
  opacity: 0.3;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  position: absolute;
  z-index: -1;
}
// :host {

//   display: block;
//   width: 368px;
//   margin: 0 auto;

//   ::ng-deep {
//     h3 {
//       margin-bottom: 20px;
//       font-size: 16px;
//     }
//     .submit {
//       width: 50%;
//     }
//     .login {
//       float: right;
//       line-height: 1em;
//     }
//   }
// }
// ::ng-deep {
//   .register-password-cdk {
//     .success,
//     .warning,
//     .error {
//       transition: color 0.3s;
//     }
//     .success {
//       color: green;
//     }
//     .warning {
//       color: orange;
//     }
//     .error {
//       color: red;
//     }
//     .progress-pass > .progress {
//       .ant-progress-bg {
//         background-color: yellow;
//       }
//     }
//   }
// }







 form: FormGroup;
  error = '';
  type = 0;
  visible = false;
  status = 'pool';
  progress = 0;
  passwordProgressMap = {
    ok: 'success',
    pass: 'normal',
    pool: 'exception',
  };
  count = 0;
  interval$: any;
  constructor(fb: FormBuilder, private router: Router, public http: HttpClient, public msg: NzMessageService) {
    this.form = fb.group({
      mail: [null, [Validators.required, Validators.email]],
      password: [null, [Validators.required, Validators.minLength(6)]],
      confirm: [null, [Validators.required, Validators.minLength(6)]],
      mobilePrefix: ['+86'],
      mobile: [null, [Validators.required, Validators.pattern(/^1\d{10}$/)]],
      captcha: [null, [Validators.required]],
    });
  }




  static checkPassword(control: FormControl): NzSafeAny {
    if (!control) {
      return null;
    }
    const self: any = this;
    self.visible = !!control.value;
    if (control.value && control.value.length > 9) {
      self.status = 'ok';
    } else if (control.value && control.value.length > 5) {
      self.status = 'pass';
    } else {
      self.status = 'pool';
    }

    if (self.visible) {
      self.progress = control.value.length * 10 > 100 ? 100 : control.value.length * 10;
    }
  }

  static passwordEquar(control: FormControl): { equar: boolean } | null {
    if (!control || !control.parent) {
      return null;
    }
    if (control.value !== control.parent.get('password')!.value) {
      return { equar: true };
    }
    return null;
  }
  ngOnInit(): void {

  }
  getCaptcha(): void {
    if (this.mobile.invalid) {
      this.mobile.markAsDirty({ onlySelf: true });
      this.mobile.updateValueAndValidity({ onlySelf: true });
      return;
    }
    this.count = 59;
    this.interval$ = setInterval(() => {
      this.count -= 1;
      if (this.count <= 0) {
        clearInterval(this.interval$);
      }
    }, 1000);
  }

  // #endregion

  submit(): void {
    this.error = '';
    Object.keys(this.form.controls).forEach((key) => {
      this.form.controls[key].markAsDirty();
      this.form.controls[key].updateValueAndValidity();
    });
    if (this.form.invalid) {
      return;
    }

    const data = this.form.value;
    this.http.post('/register', data).subscribe(() => {
      this.router.navigateByUrl('/passport/register-result', {
        queryParams: { email: data.mail },
      });
    });
  }
  switch($event) {

  }

  ngOnDestroy(): void {
    if (this.interval$) {
      clearInterval(this.interval$);
    }
  }
   // #region fields

   get mail(): AbstractControl {
    return this.form.controls.mail;
  }
  get password(): AbstractControl {
    return this.form.controls.password;
  }
  get confirm(): AbstractControl {
    return this.form.controls.confirm;
  }
  get mobile(): AbstractControl {
    return this.form.controls.mobile;
  }
  get captcha(): AbstractControl {
    return this.form.controls.captcha;
  }

